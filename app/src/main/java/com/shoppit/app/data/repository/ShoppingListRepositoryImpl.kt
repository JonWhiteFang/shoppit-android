package com.shoppit.app.data.repository

import com.shoppit.app.data.error.PersistenceError
import com.shoppit.app.data.local.dao.ShoppingListDao
import com.shoppit.app.data.mapper.toDomainModel
import com.shoppit.app.data.mapper.toEntity
import com.shoppit.app.domain.model.ShoppingListItem
import com.shoppit.app.domain.repository.ShoppingListRepository
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.catch
import kotlinx.coroutines.flow.map
import javax.inject.Inject

class ShoppingListRepositoryImpl @Inject constructor(
    private val shoppingListDao: ShoppingListDao
) : ShoppingListRepository {
    
    override fun getShoppingList(): Flow<Result<List<ShoppingListItem>>> {
        return shoppingListDao.getAllItems()
            .map { entities -> 
                Result.success(entities.map { it.toDomainModel() })
            }
            .catch { e -> 
                emit(Result.failure(PersistenceError.QueryFailed("getAllItems", e)))
            }
    }
    
    override fun getShoppingListItem(id: Long): Flow<Result<ShoppingListItem>> {
        return shoppingListDao.getItemById(id)
            .map { entity ->
                entity?.let { Result.success(it.toDomainModel()) }
                    ?: Result.failure(PersistenceError.QueryFailed(
                        "getItemById",
                        IllegalStateException("Shopping list item not found")
                    ))
            }
            .catch { e ->
                emit(Result.failure(PersistenceError.QueryFailed("getItemById", e)))
            }
    }
    
    override suspend fun addShoppingListItem(item: ShoppingListItem): Result<Long> {
        return try {
            val id = shoppingListDao.insertItem(item.toEntity())
            Result.success(id)
        } catch (e: Exception) {
            Result.failure(PersistenceError.WriteFailed("insertItem", e))
        }
    }
    
    override suspend fun addShoppingListItems(items: List<ShoppingListItem>): Result<List<Long>> {
        return try {
            val ids = shoppingListDao.insertItems(items.map { it.toEntity() })
            Result.success(ids)
        } catch (e: Exception) {
            Result.failure(PersistenceError.WriteFailed("insertItems", e))
        }
    }
    
    override suspend fun updateShoppingListItem(item: ShoppingListItem): Result<Unit> {
        return try {
            shoppingListDao.updateItem(item.toEntity())
            Result.success(Unit)
        } catch (e: Exception) {
            Result.failure(PersistenceError.WriteFailed("updateItem", e))
        }
    }
    
    override suspend fun deleteShoppingListItem(id: Long): Result<Unit> {
        return try {
            shoppingListDao.deleteItemById(id)
            Result.success(Unit)
        } catch (e: Exception) {
            Result.failure(PersistenceError.WriteFailed("deleteItemById", e))
        }
    }
    
    override suspend fun deleteCheckedItems(): Result<Unit> {
        return try {
            shoppingListDao.deleteCheckedItems()
            Result.success(Unit)
        } catch (e: Exception) {
            Result.failure(PersistenceError.WriteFailed("deleteCheckedItems", e))
        }
    }
    
    override suspend fun deleteAutoGeneratedItems(): Result<Unit> {
        return try {
            shoppingListDao.deleteAutoGeneratedItems()
            Result.success(Unit)
        } catch (e: Exception) {
            Result.failure(PersistenceError.WriteFailed("deleteAutoGeneratedItems", e))
        }
    }
    
    override suspend fun uncheckAllItems(): Result<Unit> {
        return try {
            shoppingListDao.uncheckAllItems()
            Result.success(Unit)
        } catch (e: Exception) {
            Result.failure(PersistenceError.WriteFailed("uncheckAllItems", e))
        }
    }
}
