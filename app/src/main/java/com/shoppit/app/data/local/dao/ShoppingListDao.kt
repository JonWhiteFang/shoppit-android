package com.shoppit.app.data.local.dao

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import androidx.room.Update
import com.shoppit.app.data.local.entity.ShoppingListItemEntity
import kotlinx.coroutines.flow.Flow

@Dao
interface ShoppingListDao {
    
    @Query("SELECT * FROM shopping_list_items ORDER BY category ASC, name ASC")
    fun getAllItems(): Flow<List<ShoppingListItemEntity>>
    
    @Query("SELECT * FROM shopping_list_items WHERE id = :itemId")
    fun getItemById(itemId: Long): Flow<ShoppingListItemEntity?>
    
    @Query("SELECT * FROM shopping_list_items WHERE is_checked = 0 ORDER BY category ASC, name ASC")
    fun getUncheckedItems(): Flow<List<ShoppingListItemEntity>>
    
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertItem(item: ShoppingListItemEntity): Long
    
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertItems(items: List<ShoppingListItemEntity>): List<Long>
    
    @Update
    suspend fun updateItem(item: ShoppingListItemEntity)
    
    @Query("UPDATE shopping_list_items SET is_checked = :isChecked WHERE id = :itemId")
    suspend fun updateCheckedStatus(itemId: Long, isChecked: Boolean)
    
    @Query("UPDATE shopping_list_items SET is_checked = 0")
    suspend fun uncheckAllItems()
    
    @Query("DELETE FROM shopping_list_items WHERE id = :itemId")
    suspend fun deleteItemById(itemId: Long)
    
    @Query("DELETE FROM shopping_list_items WHERE is_checked = 1")
    suspend fun deleteCheckedItems()
    
    @Query("DELETE FROM shopping_list_items WHERE is_manual = 0")
    suspend fun deleteAutoGeneratedItems()
    
    @Query("SELECT COUNT(*) FROM shopping_list_items")
    suspend fun getItemCount(): Int
    
    @Query("SELECT COUNT(*) FROM shopping_list_items WHERE is_checked = 1")
    suspend fun getCheckedItemCount(): Int
}
