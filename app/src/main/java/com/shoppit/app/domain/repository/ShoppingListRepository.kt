package com.shoppit.app.domain.repository

import com.shoppit.app.domain.model.BudgetSummary
import com.shoppit.app.domain.model.ShoppingListItem
import kotlinx.coroutines.flow.Flow

interface ShoppingListRepository {
    
    fun getShoppingList(): Flow<Result<List<ShoppingListItem>>>
    
    fun getShoppingListItem(id: Long): Flow<Result<ShoppingListItem>>
    
    suspend fun addShoppingListItem(item: ShoppingListItem): Result<Long>
    
    suspend fun addShoppingListItems(items: List<ShoppingListItem>): Result<List<Long>>
    
    suspend fun updateShoppingListItem(item: ShoppingListItem): Result<Unit>
    
    suspend fun deleteShoppingListItem(id: Long): Result<Unit>
    
    suspend fun deleteCheckedItems(): Result<Unit>
    
    suspend fun deleteAutoGeneratedItems(): Result<Unit>
    
    suspend fun uncheckAllItems(): Result<Unit>
    
    // Management features
    
    /**
     * Update notes for a shopping list item.
     * @param itemId Item ID
     * @param notes New notes text
     * @return Result indicating success or failure
     */
    suspend fun updateItemNotes(itemId: Long, notes: String): Result<Unit>
    
    /**
     * Toggle priority status for a shopping list item.
     * @param itemId Item ID
     * @param isPriority New priority status
     * @return Result indicating success or failure
     */
    suspend fun toggleItemPriority(itemId: Long, isPriority: Boolean): Result<Unit>
    
    /**
     * Update custom order for a shopping list item.
     * @param itemId Item ID
     * @param newOrder New order value
     * @return Result indicating success or failure
     */
    suspend fun updateItemOrder(itemId: Long, newOrder: Int): Result<Unit>
    
    /**
     * Update estimated price for a shopping list item.
     * @param itemId Item ID
     * @param price New price (null to remove price)
     * @return Result indicating success or failure
     */
    suspend fun updateItemPrice(itemId: Long, price: Double?): Result<Unit>
    
    /**
     * Move item to a different store section.
     * @param itemId Item ID
     * @param section New section name
     * @return Result indicating success or failure
     */
    suspend fun moveItemToSection(itemId: Long, section: String): Result<Unit>
    
    /**
     * Duplicate a shopping list item.
     * @param itemId Item ID to duplicate
     * @return Result containing the new item ID
     */
    suspend fun duplicateItem(itemId: Long): Result<Long>
    
    /**
     * Get shopping list items filtered by store section.
     * @param section Section name
     * @return Flow of Result containing list of items in the section
     */
    fun getItemsBySection(section: String): Flow<Result<List<ShoppingListItem>>>
    
    /**
     * Get all priority items across all sections.
     * @return Flow of Result containing list of priority items
     */
    fun getPriorityItems(): Flow<Result<List<ShoppingListItem>>>
    
    /**
     * Calculate budget summary for the shopping list.
     * @return Result containing BudgetSummary
     */
    suspend fun getBudgetSummary(): Result<BudgetSummary>
}
